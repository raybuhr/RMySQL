% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/table.R
\docType{methods}
\name{mysql-tables}
\alias{dbExistsTable,MySQLConnection,character-method}
\alias{dbListTables,MySQLConnection-method}
\alias{dbReadTable,MySQLConnection,character-method}
\alias{dbRemoveTable,MySQLConnection,character-method}
\alias{dbUpsertTable,MySQLConnection,character,data.frame-method}
\alias{dbWriteTable,MySQLConnection,character,character-method}
\alias{dbWriteTable,MySQLConnection,character,data.frame-method}
\alias{mysql-tables}
\title{Read and write MySQL tables.}
\usage{
\S4method{dbReadTable}{MySQLConnection,character}(conn, name, row.names = NA,
  check.names = TRUE, ...)

\S4method{dbWriteTable}{MySQLConnection,character,data.frame}(conn, name, value,
  field.types = NULL, row.names = NA, overwrite = FALSE, append = FALSE,
  ..., allow.keywords = FALSE, temporary = FALSE)

\S4method{dbWriteTable}{MySQLConnection,character,character}(conn, name, value,
  field.types = NULL, overwrite = FALSE, append = FALSE, header = TRUE,
  row.names = FALSE, nrows = 50, sep = ",", eol = "\\n", skip = 0,
  quote = "\\"", temporary = FALSE, ...)

\S4method{dbListTables}{MySQLConnection}(conn, ...)

\S4method{dbExistsTable}{MySQLConnection,character}(conn, name, ...)

\S4method{dbRemoveTable}{MySQLConnection,character}(conn, name, ...)

\S4method{dbUpsertTable}{MySQLConnection,character,data.frame}(conn, name,
  value, row.names = FALSE, temporary = FALSE)
}
\arguments{
\item{conn}{a \code{\linkS4class{MySQLConnection}} object, produced by
\code{\link[DBI]{dbConnect}}}

\item{name}{a character string specifying a table name.}

\item{row.names}{Either \code{TRUE}, \code{FALSE}, \code{NA} or a string.

  If \code{TRUE}, always translate row names to a column called "row_names".
  If \code{FALSE}, never translate row names. If \code{NA}, translate
  rownames only if they're a character vector.

  A string is equivalent to \code{TRUE}, but allows you to override the
  default name.

  For backward compatibility, \code{NULL} is equivalent to \code{FALSE}.}

\item{check.names}{If \code{TRUE}, the default, column names will be
converted to valid R identifiers.}

\item{...}{Unused, needed for compatiblity with generic.}

\item{value}{A data frame.}

\item{field.types}{Optional, overrides default choices of field types,
derived from the classes of the columns in the data frame.}

\item{overwrite}{a logical specifying whether to overwrite an existing table
or not. Its default is \code{FALSE}. (See the BUGS section below)}

\item{append}{a logical specifying whether to append to an existing table
in the DBMS.  If appending, then the table (or temporary table)
must exist, otherwise an error is reported. Its default is \code{FALSE}.}

\item{allow.keywords}{DEPRECATED.}

\item{temporary}{If \code{TRUE}, creates a temporary table that expires
when the connection is closed.}

\item{header}{logical, does the input file have a header line? Default is the
same heuristic used by \code{read.table}, i.e., \code{TRUE} if the first
line has one fewer column that the second line.}

\item{nrows}{number of lines to rows to import using \code{read.table} from
the input file to create the proper table definition. Default is 50.}

\item{sep}{field separator character}

\item{eol}{End-of-line separator}

\item{skip}{number of lines to skip before reading data in the input file.}

\item{quote}{the quote character used in the input file (defaults to
\code{\"}.)}

\item{conn}{A MySQL connection.}

\item{name}{a character string specifying a table name.}

\item{value}{A data frame.}
}
\value{
A data.frame in the case of \code{dbReadTable}; otherwise a logical
indicating whether the operation was successful.
}
\description{
These functions mimic their R counterpart \code{get}, \code{assign},
\code{exists}, \code{remove}, and \code{ls}.
}
\note{
Note that the data.frame returned by \code{dbReadTable} only has
primitive data, e.g., it does not coerce character data to factors.
}
\examples{
if (mysqlHasDefault()) {
con <- dbConnect(RMySQL::MySQL(), dbname = "test")

# By default, row names are written in a column to row_names, and
# automatically read back into the row.names()
dbWriteTable(con, "mtcars", mtcars[1:5, ], temporary = TRUE)
dbReadTable(con, "mtcars")
dbReadTable(con, "mtcars", row.names = NULL)
}
}

